package es.unileon.ulebank.domain;

// Generated Jun 15, 2014 6:36:38 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import es.unileon.ulebank.client.Client;
import es.unileon.ulebank.exceptions.TransactionException;
import es.unileon.ulebank.handler.Handler;
import es.unileon.ulebank.history.Transaction;

/**
 * Accounts generated by hbm2java
 */
@Entity
@Table(name = "ACCOUNTS", catalog = "ULEBANK_FINAL")
public class Accounts implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    /**
     * The id in String format (Hibernate's stuff)
     */
    private String accountNumber;
    /**
     * Failed transactions
     */
    private History historyByFailedHistory;
    /**
     * The id in handler format
     */
    private Handler handler;
    /**
     * DirectDebit transactions
     */
    private History historyByDirectDebitHistory;
    /**
     * Account history
     */
    private History historyByHistoryId;
    /**
     * Account balance
     */
    private double balance;

    /**
     * Default liquidation frequency
     */
    public static final int DEFAULT_LIQUIDATION_FREQUENCY = 6;
    /**
     * Default max overdraft
     */
    public static final double DEFAULT_OVERDRAFT = 0.0;
    /**
     * Last liquidation
     */
    private Date lastLiquidation;
    /**
     * Liquidation frequency in months
     */
    private int liquidationFrequency = DEFAULT_LIQUIDATION_FREQUENCY;
    /**
     * Max account's overdraft ( in positive )
     */
    private double maxOverdraft = DEFAULT_OVERDRAFT;
    /**
     * 
     */
    private Set<LiquidationFee> liquidationFees = new HashSet<LiquidationFee>(0);
    /**
     * The titulars
     */
    private Set<Client> clientses = new HashSet<Client>(0);
    /**
     * The authorizeds
     */
    private Set<Client> authorizeds = new HashSet<Client>(0);
    /**
     * The account's cards
     */
    private Set<Cards> cardses = new HashSet<Cards>(0);

    /**
     * Empty constructor for hibernate
     */
    public Accounts() {
    }

    /**
     * 
     * @param historyByFailedHistory
     * @param genericHandler
     * @param historyByDirectDebitHistory
     * @param historyByHistoryId
     * @param balance
     * @param lastLiquidation
     * @param liquidationFrequency
     * @param maxOverdraft
     */
    public Accounts(History historyByFailedHistory,
            Handler genericHandler, History historyByDirectDebitHistory,
            History historyByHistoryId, double balance, Date lastLiquidation,
            int liquidationFrequency, double maxOverdraft) {
        this.historyByFailedHistory = historyByFailedHistory;
        this.handler = genericHandler;
        this.historyByDirectDebitHistory = historyByDirectDebitHistory;
        this.historyByHistoryId = historyByHistoryId;
        this.balance = balance;
        this.lastLiquidation = lastLiquidation;
        this.liquidationFrequency = liquidationFrequency;
        this.maxOverdraft = maxOverdraft;
    }

    public Accounts(History historyByFailedHistory,
            Handler genericHandler, History historyByDirectDebitHistory,
            History historyByHistoryId, double balance, Date lastLiquidation,
            int liquidationFrequency, double maxOverdraft, Set<Loans> loanses,
            Set<LiquidationFee> liquidationFees, Set<Client> clientses,
            Set<Client> authorizeds, Set<Cards> cardses) {
        this.historyByFailedHistory = historyByFailedHistory;
        this.handler = genericHandler;
        this.historyByDirectDebitHistory = historyByDirectDebitHistory;
        this.historyByHistoryId = historyByHistoryId;
        this.balance = balance;
        this.lastLiquidation = lastLiquidation;
        this.liquidationFrequency = liquidationFrequency;
        this.maxOverdraft = maxOverdraft;
        this.liquidationFees = liquidationFees;
        this.clientses = clientses;
        this.authorizeds = authorizeds;
        this.cardses = cardses;
    }

    @GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "genericHandler"))
    @Id
    @GeneratedValue(generator = "generator")
    @Column(name = "account_number", unique = true, nullable = false, length = 64)
    public String getAccountNumber() {
        return this.accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "failedHistory", nullable = false)
    public History getHistoryByFailedHistory() {
        return this.historyByFailedHistory;
    }

    public void setHistoryByFailedHistory(History historyByFailedHistory) {
        this.historyByFailedHistory = historyByFailedHistory;
    }

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
    public Handler getHandler() {
        return this.handler;
    }

    public void setHandler(GenericHandler genericHandler) {
        this.handler = genericHandler;
    }

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "directDebitHistory", nullable = false)
    public History getHistoryByDirectDebitHistory() {
        return this.historyByDirectDebitHistory;
    }

    public void setHistoryByDirectDebitHistory(
            History historyByDirectDebitHistory) {
        this.historyByDirectDebitHistory = historyByDirectDebitHistory;
    }

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name = "historyId", nullable = false)
    public History getHistoryByHistoryId() {
        return this.historyByHistoryId;
    }

    public void setHistoryByHistoryId(History historyByHistoryId) {
        this.historyByHistoryId = historyByHistoryId;
    }

    @Column(name = "balance", nullable = false, precision = 22, scale = 0)
    public double getBalance() {
        return this.balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_liquidation", nullable = false, length = 19)
    public Date getLastLiquidation() {
        return this.lastLiquidation;
    }

    public void setLastLiquidation(Date lastLiquidation) {
        this.lastLiquidation = lastLiquidation;
    }

    @Column(name = "liquidation_frequency", nullable = false)
    public int getLiquidationFrequency() {
        return this.liquidationFrequency;
    }

    public void setLiquidationFrequency(int liquidationFrequency) {
        this.liquidationFrequency = liquidationFrequency;
    }

    @Column(name = "max_overdraft", nullable = false, precision = 22, scale = 0)
    public double getMaxOverdraft() {
        return this.maxOverdraft;
    }

    public boolean setMaxOverdraft(double maxOverdraft) {
        if (maxOverdraft >= 0) {
            this.maxOverdraft = maxOverdraft;
            return true;
        }
        return false;
    }

    public void doTransaction(Transaction t) throws TransactionException {
        StringBuilder err = new StringBuilder();
        if ((this.balance + t.getAmount()) < -this.maxOverdraft) {
            err.append(
                    "Cannot withdrawal money, max overdraft reached. Max overdraft = ")
                    .append(this.maxOverdraft).append("\n");
        }

        if (err.length() > 0) {
            throw new TransactionException(err.toString());
        }

        this.balance += t.getAmount();

        final boolean success = this.historyByHistoryId.add(t);
        if (success) {
            this.balance += t.getAmount();
        } else {
            final String error = "Cannot store the transaction\n";
            throw new TransactionException(error);
        }
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "accounts")
    public Set<LiquidationFee> getLiquidationFees() {
        return this.liquidationFees;
    }

    public void setLiquidationFees(Set<LiquidationFee> liquidationFees) {
        this.liquidationFees = liquidationFees;
    }

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "ACCOUNTS_CLIENTS", catalog = "ULEBANK_FINAL", joinColumns = { @JoinColumn(name = "account_number", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "client_id", nullable = false, updatable = false) })
    public Set<Client> getClientes() {
        return this.clientses;
    }

    public void setClientes(Set<Client> clientses) {
        this.clientses = clientses;
    }

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "ACCOUNTS_AUTHORIZEDS", catalog = "ULEBANK_FINAL", joinColumns = { @JoinColumn(name = "account_number", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "client_id", nullable = false, updatable = false) })
    public Set<Client> getAuthorizeds() {
        return this.authorizeds;
    }

    public void setAuthorizeds(Set<Client> authorizeds) {
        this.authorizeds = authorizeds;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "accounts")
    public Set<Cards> getCardses() {
        return this.cardses;
    }

    public void setCardses(Set<Cards> cardses) {
        this.cardses = cardses;
    }

    public boolean removeCard(Handler cardId) {
        // TODO Auto-generated method stub
        return false;
    }

    public void addCard(Cards card) {
        // TODO Auto-generated method stub
        
    }

    public Cards searchCard(Handler cardId) {
        // TODO Auto-generated method stub
        return null;
    }

}
